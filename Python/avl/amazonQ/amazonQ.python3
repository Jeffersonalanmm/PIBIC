import random

class Node:
    def __init__(self, key):
        self.key = key
        self.left = None
        self.right = None
        self.height = 1

class AVLTree:
    def get_height(self, node):
        if not node:
            return 0
        return node.height
    
    def get_balance(self, node):
        if not node:
            return 0
        return self.get_height(node.left) - self.get_height(node.right)
    
    def update_height(self, node):
        if not node:
            return
        node.height = max(self.get_height(node.left), self.get_height(node.right)) + 1
    
    def right_rotate(self, y):
        x = y.left
        T2 = x.right
        
        x.right = y
        y.left = T2
        
        self.update_height(y)
        self.update_height(x)
        
        return x
    
    def left_rotate(self, x):
        y = x.right
        T2 = y.left
        
        y.left = x
        x.right = T2
        
        self.update_height(x)
        self.update_height(y)
        
        return y
    
    def insert(self, root, key):
        if not root:
            return Node(key)
            
        if key < root.key:
            root.left = self.insert(root.left, key)
        elif key > root.key:
            root.right = self.insert(root.right, key)
        else:
            return root
        
        self.update_height(root)
        
        balance = self.get_balance(root)
        
        # Left Left Case
        if balance > 1 and key < root.left.key:
            return self.right_rotate(root)
        
        # Right Right Case
        if balance < -1 and key > root.right.key:
            return self.left_rotate(root)
        
        # Left Right Case
        if balance > 1 and key > root.left.key:
            root.left = self.left_rotate(root.left)
            return self.right_rotate(root)
        
        # Right Left Case
        if balance < -1 and key < root.right.key:
            root.right = self.right_rotate(root.right)
            return self.left_rotate(root)
        
        return root
    
    def get_min_value_node(self, root):
        current = root
        while current.left:
            current = current.left
        return current
    
    def delete(self, root, key):
        if not root:
            return root
            
        if key < root.key:
            root.left = self.delete(root.left, key)
        elif key > root.key:
            root.right = self.delete(root.right, key)
        else:
            if not root.left:
                return root.right
            elif not root.right:
                return root.left
                
            temp = self.get_min_value_node(root.right)
            root.key = temp.key
            root.right = self.delete(root.right, temp.key)
        
        if not root:
            return root
            
        self.update_height(root)
        
        balance = self.get_balance(root)
        
        # Left Left Case
        if balance > 1 and self.get_balance(root.left) >= 0:
            return self.right_rotate(root)
        
        # Left Right Case
        if balance > 1 and self.get_balance(root.left) < 0:
            root.left = self.left_rotate(root.left)
            return self.right_rotate(root)
        
        # Right Right Case
        if balance < -1 and self.get_balance(root.right) <= 0:
            return self.left_rotate(root)
        
        # Right Left Case
        if balance < -1 and self.get_balance(root.right) > 0:
            root.right = self.right_rotate(root.right)
            return self.left_rotate(root)
        
        return root
    
    def search(self, root, key):
        if not root or root.key == key:
            return root
            
        if key < root.key:
            return self.search(root.left, key)
        return self.search(root.right, key)

def main():
    avl_tree = AVLTree()
    root = None
    
    # Insert 1000 random values between 1 and 10000
    random_values = random.sample(range(1, 10001), 1000)
    
    for value in random_values:
        root = avl_tree.insert(root, value)
    
    # Perform some random searches
    for _ in range(10):
        search_value = random.choice(random_values)
        result = avl_tree.search(root, search_value)
    
    # Delete some random values
    for _ in range(100):
        delete_value = random.choice(random_values)
        root = avl_tree.delete(root, delete_value)

if __name__ == "__main__":
    main()
