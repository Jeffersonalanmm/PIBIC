import heapq
import random

def dijkstra(graph, start):
    distances = {node: float('inf') for node in graph}
    distances[start] = 0
    pq = [(0, start)]

    while pq:
        current_dist, current_node = heapq.heappop(pq)

        if current_dist > distances[current_node]:
            continue

        for neighbor, weight in graph[current_node].items():
            distance = current_dist + weight
            if distance < distances[neighbor]:
                distances[neighbor] = distance
                heapq.heappush(pq, (distance, neighbor))

    return distances

if __name__ == "__main__":
    # Gerar grafo aleatório com 1000 nós
    num_nodes = 1000
    nodes = [f"Node_{i}" for i in range(num_nodes)]
    graph = {node: {} for node in nodes}

    # Adicionar arestas aleatórias com pesos
    for node in nodes:
        num_edges = random.randint(1, 10)  # Cada nó terá de 1 a 10 arestas
        neighbors = random.sample(nodes, num_edges)
        for neighbor in neighbors:
            if neighbor != node:
                graph[node][neighbor] = random.randint(1, 100)  # Peso entre 1 e 100

    # Selecionar nó inicial aleatório
    start_node = random.choice(nodes)
    # Executar o algoritmo de Dijkstra
    dijkstra(graph, start_node)
